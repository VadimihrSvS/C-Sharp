//подключаемые модули пространств имен
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab_6
{
    //За основу класса взят Boeing 777
    class airplane //объявление класса airplane 
    {
        //объявление полей класса airplane

        private string board_num; //номер борта                   ||                 (имя объекта)
        public string flight_num; //номер рейса
        private int[] motor_power = new int[2]; //мощность двигателей в процентах    [1_мотор, 2_мотор]
        private int fuel_using; //расход топлива                                     (7000 кг/ч - нормально)
        private int Volume; //общий объем горючего                                   (бак в 120000 л - нормально)
        private int Speed; //скорость                                                (900 км/ч - нормально)
        private int Height; //высота                                                 (10-12 км - нормально)

        //объявление конструкторов класса airplane

        //объявление конструктора для всех параметров
        public airplane(string board_num, string flight_num, int fuel_using, int Volume, int Speed, int Height, params int[] motor_power)
        {
            this.board_num = board_num; //Инициализация номера борта
            this.flight_num = flight_num; //Инициализация номера рейса
            FUEL = fuel_using; //Инициализация расхода топлива исходя из свойства
            VOLUME = Volume; //Инициализация общего объема топлива исходя из свойства
            SPEED = Speed; //Инициализация скорости исходя из свойства
            HEIGHT = Height; //Инициализация высоты исходя их свойства
            MOTOR = motor_power; //Инициализация массива мощностей двигателей
        } //конец объявления конструктора для всех параметров

        //объявление конструктора для полностью отсутствующих параметров
        public airplane()
        {
            this.board_num = "NoNumber"; //Инициализация номера борта
            this.flight_num = "NoNumber"; //Инициализация номера рейса
            this.fuel_using = 0; //Инициализация расхода топлива
            this.Volume = 0; //Инициализация общего объема топлива
            this.Speed = 0; //Инициализация скорости
            this.Height = 0; //Инициализация высоты
            MOTOR = motor_power; //Инициализация массива мощностей двигателей
        } //конец объявления конструктора для полностью отсутствующих параметров

        //объявление конструктора для частичного набора параметров
        public airplane(string board_num, int Volume, int Speed)
        {
            this.board_num = board_num; //Инициализация номера борта
            this.flight_num = "NoNumber"; //Инициализация номера рейса
            VOLUME = Volume; //Инициализация общего объема топлива исходя из свойства
            SPEED = Speed; //Инициализация скорости исходя из свойства
        } //конец объявления конструктора для полностью отсутствующих параметров

        public airplane(string board_num)
        {
            this.board_num = board_num; //Инициализация номера борта
            this.flight_num = "NoNumber"; //Инициализация номера рейса
            this.fuel_using = 0; //Инициализация расхода топлива
            this.Volume = 0; //Инициализация общего объема топлива
            this.Speed = 0; //Инициализация скорости
            this.Height = 0; //Инициализация высоты
            MOTOR = motor_power; //Инициализация массива мощностей двигателей
        } //конец объявления конструктора для полностью отсутствующих параметров

        //объявление свойств нетекстовых полей, класса airplane
        public string BOARD
        { //объявление свойства для имени объекта(номер борта самолета)
            get
            { //объявление аксессора чтения - get
                return board_num;
            } //конец объявления аксессора чтения
        } //конец объявления свойства для номера борта самолета

        public int FUEL
        { //объявление свойства для расходуемого топлива
            get
            { //объявление аксессора чтения - get
                return fuel_using;
            } //конец объявления аксесора чтения
            set
            { //объявление аксессора записи - set
                if (value <= 7000 && value > 0)
                { //условие на корректность значения расходуемого топлива (0 < fuel_us <= 7000) (кг/ч)
                    fuel_using = value;
                }
            } //конец объявления аксесора записи
        } //конец объявления свойства для расходуемого топлива

        public int VOLUME
        { //объявление свойства для общего объема горючего
            get
            { //объявление аксессора чтения - get
                return Volume;
            } //конец объявления аксессора чтения
            set
            { //объявление аксессора записи - set
                if (value <= 120000 && value >= 100000)
                { //условие на корректность значения объема бака (100000 < volume < 120000) (л)
                    Volume = value;
                }
            } //конец объявления аксессора записи
        } //конец объявления свойства для общего объема горючего

        public int SPEED
        { //объявление свойства для скорости
            get
            { //объявление аксессора чтения - get
                return Speed;
            } //конец объявления аксессора чтения
            set
            { //объявление аксессора записи - set
                if (value <= 950 && value >= 0)
                { //условие на корректность значения скорости (0 <= speed <= 950) (км/ч)
                    Speed = value;
                }
            } //конец объявления аксессора записи
        } //конец объявления свойства для скорости

        public int HEIGHT
        { //объявление свойства для высоты
            get
            { //объявление аксессора чтения - get
                return Height;
            } //конец объявления аксессора чтения
            set
            { //объявление аксессора записи - set
                if (value <= 12000 && value >= 0)
                { //условие на корректность значения высоты (0 <= height <= 12000) (м)
                    Height = value;
                }
            } //конец объявления аксессора записи
        } //конец объявления свойства для высоты

        public int[] MOTOR
        { //объявление свойства для массива мощностей двигателей
            get
            { //объявление аксессора чтения - get
                return motor_power;
            } //конец объявления аксессора чтения
            set
            { //объявление аксессора записи - set
              //   motor_power.Initialize(); //инициализация массива
                int i = 0;
                foreach (int m in value)
                { //цикл по значениям массива
                    if ((value[i] > 0) && (value[i] <= 100))
                    {  //ограничиваем область значений мощностей двигателей (0 < value <= 100)
                        motor_power[i] = m; //присваиваем значение, если условие выполняется, если нет, то в массив "ложится" 0
                    }
                    i++; //следующая итерация        
                    if (i >= motor_power.Length) break; //ограничиваем массив, по его длине
                } //конец цикла 
            } //конец объявления аксессора записи
        } //конец объявления свойства для массива мощностей двигателей

        //объявление методов класса airplane

        //метод, отображающий все поля класса
        public string print()
        { //объявление метода print()
            return ($"Номер борта: {BOARD}\nНомер рейса: {flight_num}\nМощность двигателей: {MOTOR[0]} {MOTOR[1]} %\nПотребление горючего: {FUEL} кг/ч\nОбщий объем горючего {VOLUME} л\nСкорость самолета: {SPEED} км/ч\nВысота: {HEIGHT} м\n");
        } //конец объявления метода print()

        //метод, определяющий потребление горючего в данном режиме полета всеми  двигателями
        public string fuel_consum()
        { //объявление метода fuel_consum()
            int[] x = new int[MOTOR.Length]; //массив значений потребления горючего двигателЯМИ
            for (int i = 0; i < MOTOR.Length; i++)
            {
                x[i] = (FUEL * MOTOR[i]) / 100; //расчет значения потребляемого горючего двигателЕМ
            }
            return ($"Потребление горючего первым двигателем: {x[0]} кг/ч\nПотребление горючего вторым двигателем: {x[1]} кг/ч\n");
        } //конец объявления метода fuel_consum()
          //метод, определяющий сбой двигателя (если мощность ниже 50%, скорость и высота падают пропорционально мощности)
        public string motor_check()
        { //объявление метода motor_check()
            int m = 0; //"просевший" двигатель
            int sp = 0; //скорость
            int h = 0;  //высота
            string s = " "; //возвращаемая методом строка
            for (int i = 0; i < MOTOR.Length; i++)
            { //цикл по двигателям

                if (MOTOR[i] >= 50) continue; //если мощность двигателя больше 50%, проверяем следующий
                else
                { //если сбой в двигателе
                    m = i; //"запоминаем" просевший двигатель;
                    sp = (SPEED * MOTOR[i]) / 100; //падение скорости самолета, пропорционально мощности наименьшего двигателя
                    h = (HEIGHT * MOTOR[i]) / 100; //падение высоты самолета, пропорционально мощности наименьшего двигателя
                }
            }
            if (sp == 0 && h == 0)
            { //если высота и скорость не изменили свое первоначальное значение, то оба двигателя в норме
                s = "Оба двигателя в норме\n"; //записываем строку s
                return s;  //возвращаем строку s
            }
            else
            { //в противном случае...
                s = $"В {++m}-м двигателе произошел сбой:\n\t\tСкорость полета в данный момент: {sp} км/ч\n\t\tВысота полета в данный момент: {h} м";
                return s;
            }
        } //конец объявления метода motor_check()

        //метод, определяющий более быстрый самолет из двух (возвращает true, если скорость текущего выше)
        public bool quickTwo(airplane a)
        { //объявление метода quickTwo()
            bool x = true; //возвращаемое значение

            if (a.SPEED > SPEED)
            { //возвращаем false, если передаваемый в параметре самолет быстрее того, от которого вызывается метод
                x = false;
                return x;
            }
            else
            {  //возвращаем true, если передаваемый в параметре самолет медленнее того, от которого вызывается метод              
                return x;
            }
        } //конец объявления метода quickTwo()

        //статический метод определяющий наиболее быстрый самолет из трех
        public static airplane quickThree(airplane[] a)
        { //объявление статического метода quickThree()
            airplane f = a[0]; //возвращаемое значение
            for (int i = 0; i < a.Length; i++)
            {
                if (i == 0)
                { //для безопасности, перебрасываем счетчик вперед
                    continue;
                }
                if (a[i].SPEED > a[i - 1].SPEED)
                { //сравниваем скорости самолетов (данного и предыдущего)
                    f = a[i]; //если скорость данного больше, "сохраняем" этот объект
                }
            }
            return f;
        } //конец объявления статического метода quickThree()

        //-------------------К ЛАБОРАТОРНОЙ РАБОТЕ 6-----------------------------------------------------------------------

        //1.a. переменная типа делегат, без параметров
        public DELEGAT_void D;

        //1.b. метод, который заполняет поле типа делегат
        public void Filling_Delegat(DELEGAT_void x)
        {
            D = x; //заполнение поля типа делегат
        }

        //1.с. метод, который запускает делегат
        public void Start_Delegat()
        {
            //D?.Invoke(); //альтернативный способ
            if (D != null)
            {
                D();
            }
            else { Console.WriteLine("Делегат - null."); }
        }

        //1.g.	Добавьте к классу метод, который сравнивает эти поля в разных объектах. 
        //Сравните 2-х питомцев – они разговаривают одинаково или нет.
        public void EqualsDel(airplane x)
        {
            if (D != null)
            {
                if (D == x.D) { Console.WriteLine("Делегаты одинаковые."); }
                else { Console.WriteLine("Делегаты разные."); }
            }
        }

        //2.a	Добавьте к классу делегат с параметром. 
        //Например, вы можете задать различные способы набора веса питомцами – добавить аргумент, умножить на аргумент и т.д. 
        //Используйте анонимные делегаты и лямбда-выражения.
        public delegate void DELEGAT_param(airplane x, int sp);
        public delegate string DELEGAT_Event(airplane a, int b); //делегат с возвращаемой строкой, для события.
        private DELEGAT_param DelP;

        //Заполнение поля типа делегат DelP
        public void Del_param_filling(DELEGAT_param x)
        {
            DelP = x;
        }

        //Запуск делегата
        public void Start_Delegat_param(int sp)
        {
            //D?.Invoke(); //альтернативный способ
            if (DelP != null)
            {
                DelP(this, sp);
            }
            else { Console.WriteLine("Делегат - null."); }
        }

        //3.a
        private event DELEGAT_void _ESpeed; //событие(без параметров), сигнализирующее пользователя о том, что самолет достиг макс./мин. скорости
        private event DELEGAT_Event _EHeight; //событие(с параметрами), сигнализирующее пользователя о том, что самолет достиг макс./мин. высоты

        //3.c Добавьте аксессоры (add/remove) для добавления и удаления обработчиков.
        public event DELEGAT_void ESpeed
        {
            add
            {
                _ESpeed += value; //добавление событию, делегата
            }
            remove
            {
                _ESpeed -= value; //удаление из события, делегата
            }
        }

        public event DELEGAT_Event EHeight
        {
            add
            {
                _EHeight += value; //добавление событию, делегата
            }
            remove
            {
                _EHeight -= value; //удаление из события, делегата
            }
        }

        //метод, ускоряющий самолет. В случае развития максимальной скорости происходит событие.
        public void Accelerate(int s)
        {
            if ((SPEED + s) >= 950)
            {
                SPEED = 950;
                _ESpeed?.Invoke(); //Событие без параметров (Экземплярный метод)
            }
            else SPEED += s;
        }

        //метод, тормозящий самолет. В случае остановки самолета происходит событие.
        public void Breaking(int s)
        {
            if ((SPEED - s) <= 0)
            {
                SPEED = 0;
                _ESpeed?.Invoke(); //Событие без параметров (Экземплярный метод)
            }
            else SPEED -= s;
        }

        //метод, снижающий высоту полета. В случае приземления, происходит событие.
        public void decreaseHeight(int h)
        {
            if ((HEIGHT - h) >= 0 && (HEIGHT - h) <= 12000)
            {
                HEIGHT -= h;
                Console.WriteLine(_EHeight?.Invoke(this, h));
            }
        }

        //3. Экземплярный метод собственного класса, как обработчик события
        public string Handler(airplane x, int a)
        {
            return string.Format("Высота самолета {0} уменьшилась на {1} м.", x.BOARD, a);
        }
    } //конец объявления класса airplane
} //конец объявления пользовательского пространства имен Zadan_1